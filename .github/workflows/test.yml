name: Test Docker Images

on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string
      base_image_tag:
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/latex-compiler

jobs:
  test-images:
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(inputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag and cache sources
        id: image-tag
        run: |
          # For testing, we need to use the variant images, not the base image
          # The variant images are tagged with the commit SHA and variant suffix
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG="pr-${{ github.event.number }}${{ matrix.tags_suffix }}"
          else
            # Use the commit SHA format that matches the build workflow
            TAG="${{ github.ref_name }}-${{ github.sha }}${{ matrix.tags_suffix }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Using image tag: ${TAG}"
          
          # Set up cache sources for potential fallback builds
          CACHE_SOURCES="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}${{ matrix.tags_suffix }}"
          echo "cache_sources=${CACHE_SOURCES}" >> $GITHUB_OUTPUT

      - name: Pull and verify image
        id: pull-image
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"
          echo "Attempting to pull image: ${IMAGE_TAG}"
          
          # Try to pull the image with cache consideration
          if docker pull "${IMAGE_TAG}"; then
            echo "✅ Successfully pulled image: ${IMAGE_TAG}"
            echo "image_available=true" >> $GITHUB_OUTPUT
            echo "final_tag=${{ steps.image-tag.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to pull image: ${IMAGE_TAG}"
            echo "Let's check what images are available..."
          
            # Try alternative tag formats with cache sources
            ALT_TAG1="${{ github.ref_name }}-${{ github.sha }}"
            ALT_TAG2="${{ inputs.base_image_tag }}"
            ALT_TAG3="${{ github.ref_name }}-${{ github.sha }}${{ matrix.tags_suffix }}"
          
            echo "Trying alternative tags with cache consideration..."
          
            # Try to pull cache sources first to optimize subsequent operations
            echo "Pre-pulling cache sources..."
            docker pull "${{ steps.image-tag.outputs.cache_sources }}" || true
          
            if docker pull "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ALT_TAG1}"; then
              echo "✅ Found image with tag: ${ALT_TAG1}"
              echo "final_tag=${ALT_TAG1}" >> $GITHUB_OUTPUT
              echo "image_available=true" >> $GITHUB_OUTPUT
            elif docker pull "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ALT_TAG3}"; then
              echo "✅ Found image with tag: ${ALT_TAG3}"
              echo "final_tag=${ALT_TAG3}" >> $GITHUB_OUTPUT
              echo "image_available=true" >> $GITHUB_OUTPUT
            elif docker pull "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ALT_TAG2}"; then
              echo "✅ Found base image with tag: ${ALT_TAG2}"
              echo "final_tag=${ALT_TAG2}" >> $GITHUB_OUTPUT
              echo "image_available=true" >> $GITHUB_OUTPUT
            else
              echo "❌ No suitable image found"
              echo "image_available=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Verify image layers and cache efficiency
        if: steps.pull-image.outputs.image_available == 'true'
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pull-image.outputs.final_tag }}"
          echo "🔍 Inspecting image layers for: ${IMAGE_TAG}"
          
          # Show image information
          docker image inspect "${IMAGE_TAG}" --format='{{.Size}}' | \
            awk '{printf "Image size: %.2f MB\n", $1/1024/1024}'
          
          # Show layer information
          docker history "${IMAGE_TAG}" --format "table {{.CreatedBy}}\t{{.Size}}" | head -10

      - name: Run test suites
        if: steps.pull-image.outputs.image_available == 'true'
        run: |
          # Create results directory
          mkdir -p test-results/${{ matrix.variant }}
          
          # Use the final determined tag
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pull-image.outputs.final_tag }}"
          echo "Testing image: ${IMAGE_TAG}"
          
          # Run each test suite for this variant
          for test_suite in $(echo '${{ toJson(matrix.test_suites) }}' | jq -r '.[]'); do
            echo "🧪 Running test suite: $test_suite for variant: ${{ matrix.variant }}"
          
            # Check if test suite directory exists
            if [ ! -d "tests/$test_suite" ]; then
              echo "⚠️  Test suite directory tests/$test_suite not found, skipping"
              continue
            fi
          
            # Run all LaTeX files in the test suite
            for tex_file in tests/$test_suite/*.tex; do
              if [ -f "$tex_file" ]; then
                echo "📄 Testing: $tex_file"
                base_name=$(basename "$tex_file" .tex)
          
                # Copy test file to working directory
                cp "$tex_file" ./
          
                # Copy any additional files (images, bibliography, etc.)
                if [ -d "tests/$test_suite/assets" ]; then
                  cp -r tests/$test_suite/assets/* ./ 2>/dev/null || true
                fi
          
                # Run compilation with optimized container reuse
                if docker run --rm -v $(pwd):/data "${IMAGE_TAG}" \
                   compile.sh -i "$base_name.tex" -c; then
                  echo "✅ Test passed: $tex_file"
          
                  # Move PDF to results directory
                  if [ -f "$base_name.pdf" ]; then
                    mv "$base_name.pdf" "test-results/${{ matrix.variant }}/${test_suite}-${base_name}.pdf"
                  fi
                else
                  echo "❌ Test failed: $tex_file"
                  exit 1
                fi
          
                # Clean up
                rm -f "$base_name.tex"
                rm -f *.aux *.log *.out *.fls *.fdb_latexmk *.synctex.gz 2>/dev/null || true
              fi
            done
          done
          
          echo "🎉 All tests passed for variant: ${{ matrix.variant }}"

      - name: Upload test results
        if: steps.pull-image.outputs.image_available == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.variant }}
          path: test-results/${{ matrix.variant }}/

      - name: Test summary
        run: |
          if [[ "${{ steps.pull-image.outputs.image_available }}" == "true" ]]; then
            echo "## 🧪 Tests Completed (${{ matrix.variant }})" >> $GITHUB_STEP_SUMMARY
            echo "**Variant:** ${{ matrix.variant }}" >> $GITHUB_STEP_SUMMARY
            echo "**Test Suites:** ${{ join(matrix.test_suites, ', ') }}" >> $GITHUB_STEP_SUMMARY
            echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pull-image.outputs.final_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Tests Failed (${{ matrix.variant }})" >> $GITHUB_STEP_SUMMARY
            echo "**Variant:** ${{ matrix.variant }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** ❌ Image not found" >> $GITHUB_STEP_SUMMARY
          fi
