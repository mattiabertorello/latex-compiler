name: Prepare Build Matrix

on:
  workflow_call:
    outputs:
      matrix:
        description: 'Build matrix for variants'
        value: ${{ jobs.prepare.outputs.matrix }}
      build_date:
        description: 'Build date'
        value: ${{ jobs.prepare.outputs.build_date }}
      should_release:
        description: 'Whether to create a release'
        value: ${{ jobs.prepare.outputs.should_release }}
      base_image_tag:
        description: 'Base image tag'
        value: ${{ jobs.prepare.outputs.base_image_tag }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build_date: ${{ steps.date.outputs.date }}
      should_release: ${{ steps.check-release.outputs.should_release }}
      base_image_tag: ${{ steps.base-image-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set build date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Set base image tag
        id: base-image-tag
        run: echo "tag=${{ github.ref_name }}-${{ github.sha }}-base" >> $GITHUB_OUTPUT

      - name: Set up build matrix
        id: set-matrix
        run: |
          # Define the build matrix with package variants
          matrix=$(cat << 'EOF'
          {
            "include": [
              {
                "variant": "minimal",
                "texlive_packages": "texlive-packages-minimal.txt",
                "apt_packages": "apt-packages-minimal.txt",
                "texlive_profile": "texlive-profile-minimal.txt",
                "tags_suffix": "",
                "description": "Minimal LaTeX compiler with essential packages",
                "test_suites": ["basic", "minimal", "standard"]
              }
            ]
          }
          EOF
          )
          echo "matrix=$(echo $matrix | jq -c .)" >> $GITHUB_OUTPUT

      - name: Check if should create release
        id: check-release
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
